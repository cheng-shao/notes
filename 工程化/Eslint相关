
1.babel-eslint 
  作用：（兼容eslint本身不支持的类型或实验性功能）


2.@typescript-eslint/parser
  作用：（将 TypeScript 转换成与 estree 兼容的形式，以便在ESLint中使用。）


3.eslint-plugin-vue 
  作用：（这个插件允许我们使用 ESLint 检查 .vue 文件的 <template> 和 <script> ，以及 .js 文件中的 Vue 代码。）

4.babel-plugin-transform-vue-jsx
  作用：（转换vue的jsx语法）

5.vue-eslint-parser

6.eslint-define-config
  描述：为 .eslintrc.js 文件提供一个 defineConfig 函数。
  作用：（用于ts中类型提示，检查）


eslint解析器：
{
  parser: 'esprima'
  parser: 'babel-eslint' 
  parser: '@typescript-eslint/parser' 
  parser: 'babel-eslint' 
}
注意，在使用自定义解析器时，为了让 ESLint 在处理非 ECMAScript 5 特性时正常工作，
配置属性 `parserOptions` 仍然是必须的。
解析器会被传入 parserOptions，但是不一定会使用它们来决定功能特性的开关。

eslint插件格式：
eslint-plugin-<plugin-name> 比如：eslint-plugin-jquery
@<scope>/eslint-plugin-<plugin-name> 比如：@jquery/eslint-plugin-jquery



注：编辑器vscode中setttings.js中配置如下代码：
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    },


.eslintrc.js
{
  // 默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。设置root: true可将eslint限制到特定项目里
  // ESLint 一旦发现配置文件中有 "root": true，它就会停止在父级目录中寻找。
  root: true
  // 
  parserOptions: {
    parser: 'babel-eslint',
    sourceType: 'module' // 如果你的代码是 ECMAScript 模块
  },
  // 指定你想启用的环境，并设置它们为 true
  env: {
    browser: true,
    node: true,
    es6: true,
    ...
  },
  // 插件可以提供处理器。处理器可以从另一种文件中提取 JavaScript 代码，然后让 ESLint 检测 JavaScript 代码。
  // 或者处理器可以在预处理中转换 JavaScript 代码。
  processor: '*****',
  // 使用全局变量,避免发出no-undef警告
  globals: {
    "var1": "writable", // 允许重写变量
    "var2": "readonly" // 只读
  },
  
  // 启用一系列核心规则，这些规则报告一些常见问题, 属性值可以省略包名的前缀 eslint-config-。
  ; extends属性值包含四部分
  // plugin:
  // 包名 (省略了前缀，比如，react)
  // /
  // 配置名称 (比如 recommended)
  extends: [
    "eslint:recommended",
    "plugin:react/recommended"
  ],
  // 属性值 可以省略包名的前缀 eslint-plugin-
  plugins: [
    "react"
  ],
}


注：@typescript-eslint/parser @typescript-eslint/eslint-plugin 这俩插件统一全局或其他安装
npm install -D 
        eslint babel-eslint
        typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin 
        eslint-plugin-vue vue-eslint-parser 
        prettier eslint-config-prettier eslint-plugin-prettier 

"parser": "vue-eslint-parser",
"parserOptions": {
    "parser": "@typescript-eslint/parser",
    "sourceType": "module"
}

prettier.config.js
module.exports = {
  ....
}

package.json
script: {
  "lint:eslint": "eslint --cache --max-warnings 0  \"{src,mock}/**/*.{vue,ts,tsx}\" --fix",
  "lint:prettier": "prettier --write  \"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\"",
}



// 关于不符合prettier格式的未有错误提示，但保存会自动修复的场景，解决如下：
// 以下配置属于eslint-plugin-prettier插件的
// 在rules中加如下配置：
// "prettier/prettier": "error" // 表示被prettier标记的地方抛出错

// 处理eslint和prettier的冲突
eslint-config-prettier

// 将 Prettier 作为 ESLint 规则运行，并将差异报告为单个 ESLint 问题。
eslint-plugin-prettier
// 携带的配置
// plugin:prettier/recommended