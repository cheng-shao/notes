1.BigInt
    BigInt 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。
    这原本是 Javascript中可以用 Number 表示的最大数字。
    BigInt 可以表示任意大的整数。

  创建：
    （1）字面量：
        const bi = 123n;
        typeof bi // 'bigint'
        typeof bi === 'bigint' // true
    （2）利用BigInt:
        BigInt(123) // 123n
  比较：
    0n === 0
    // ↪ false

    0n == 0
    // ↪ true

2.optional chaining（可选链）
  ?.
  通过连接的对象的引用或函数可能是 undefined 或 null 时，可选链操作符提供了一种方法来简化被连接对象的值访问。

3.nullish coalescing（空值合并操作符）
  ??
  是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时（不含空字符串和0等假值），返回其右侧操作数，否则返回左侧操作数。

4.pipeline operator（管道运算符）
  |>
  语法格式： expression |> function
  例：
    const greeting = name => `Hello ${name}`;
    const name = 'World';
    console.log(name |> greeting); // pipeline way

5.::v-xx
  ::v-deep(.too-old td) {
    color: rgba(255, 0, 0, 0.75) !important;
  }
  <style scoped>
    /* deep selectors */
    ::v-deep(.foo) {}
    /* shorthand */
    :deep(.foo) {}

    /* targeting slot content */
    ::v-slotted(.foo) {}
    /* shorthand */
    :slotted(.foo) {}

    /* one-off global rule */
    ::v-global(.foo) {}
    /* shorthand */
    :global(.foo) {}
  </style>
  具体示例链接：https://github.com/TuSimple/naive-ui/search?q=%3A%3Av-deep

6.报警告的所有情况：
  // 都会通过console.warn打印在控制台
    console.warn(
          `Set operation on key "${String(key)}" failed: target is readonly.`,
          target
        )

    Set operation on key "${String(key)}" failed: target is readonly.
    // 对键"${String(key)}"的设置操作失败，目标是只读

    Delete operation on key "${String(key)}" failed: target is readonly.

    Write operation failed: computed value is readonly

    value cannot be made reactive: ${String(target)}

    [HMR] Root or manually mounted instance modified. Full reload required.

    [HMR] Something went wrong during Vue component hot-reload. `Full reload required.`

7.新增了ref-transform文件夹
  其实是解决ref的`.value`新的语法糖
  主要语法：
    $(ref()) // 不需要.value就可访问其值
    $$() // 访问原始(实际)ref，尤其是监听的时候（若使用了$(),想要监听ref,则必须使用$$()才可以）

  
8.源码中的导出的API中
  注：首字母为大写的是vue的TS类型，不是大写的则为vue的API
  type Axxx = ...
  interface Axxx = {
    ....
  }
